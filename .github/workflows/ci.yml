name: SonarQube
on:
  push:
    branches:
      - main
  pull_request:
    types: [ opened, synchronize, reopened ]
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: gestaopedidos

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.

      - name: Cache Maven packages
        uses: actions/cache@v4
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build and analyze
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar \
          -Pcoverage \
          -Dsonar.login=$SONAR_TOKEN \
          -Dsonar.projectKey=nicole-escobar-alves_order_api \
          -Dsonar.organization=nicole-escobar-alves \
          -Dsonar.host.url=https://sonarcloud.io \
          -Dsonar.sourceEncoding=UTF-8 \
          -Dsonar.java.binaries=target/classes \
          -Dsonar.coverage.jacoco.xmlReportPaths=target/site/jacoco/jacoco.xml \
          -Dsonar.coverage.exclusions=**/infrastructure/**,**/dto/**,**/config/** \
          -Dsonar.exclusions=**/*.json,**/*.xml \
          -Dsonar.qualitygate.wait=true \
          -Dactive.profile=test

      - name: Set up Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose
          
          docker-compose -f docker-compose.yml up -d

      - name: Wait for PostgreSQL to be ready
        run: |
          ./wait-for-it.sh postgres:5432 --timeout=30 --strict -- echo "PostgreSQL is up"

      - name: Check Docker logs
        run: |
          docker-compose logs api
          docker-compose logs postgres

      - name: Run BDD test
        run: |
          ./run_tests.sh
      
